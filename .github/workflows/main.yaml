---
# This Github workflow will run jobs to build java-app.
name: spring-petclinic
on:
  push:
  workflow_dispatch:
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
permissions:
  pull-requests: write

jobs:


  ci-package-application:
    name: Package Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Mock package
        run: |
          mkdir target
          echo "foo" > target/app.jar


#                  #      - name: Setup Java
#                  #        uses: actions/setup-java@v3
#                  #        with:
#                  #          java-version: '11'
#                  #          distribution: 'adopt'
#                  #          cache: maven
#                  #
#                  #      - name: Maven Package
#                  #        run: mvn -DskipTests --batch-mode --update-snapshots package #TODO: enable tests
#                  #
#                        - uses: actions/upload-artifact@v1
#                          with:
#                            name: maven-output
#                            path: target/
#                            
#                  
#                    #TODO: split into two jobs. Try caching dir specified by buildah bud --root
#                    create-and-push-image:
#                    #ci-create-container-image:
#                    #  name: Create Container Image
#                      needs: ci-package-application
#                      name: Create and Push Container Image
#                      runs-on: ubuntu-latest
#                      outputs:
#                        image: ${{ steps.buildah-build.outputs.image }}
#                        tags: ${{ steps.buildah-build.outputs.tags }}
#                      steps:
#                        - uses: actions/checkout@v3

#      - name: Cache Buildah Root Dir
#        uses: actions/cache@v3
#        with:
#          path: $HOME/.local/share/containers
#          key: buildah-root

#      - name: Cache Buildah Run Root Dir
#        uses: actions/cache@v3
#        with:
#          path: ./buildah-runroot
#          key: buildah-runroot
#
#      - uses: actions/download-artifact@v1
#        with:
#          name: maven-output
#          path: target/

      - name: debug-before
        run: |
          set -x
          if [ -d $HOME/.local/share/containers ]; then ls -lh $HOME/.local/share/containers; else echo NO DIR; fi

      - name: CI - Create Container Image
        id: buildah-build
        uses: redhat-actions/buildah-build@v2
        with:
          image: spring-petclinic # TODO: hard coded
          tags: ${{ github.sha }}
          containerfiles: |
            ./Containerfile.pipeline-dev
          #extra-args: --root ./buildah-root --runroot ./buildah-runroot

      - name: debug-after
        run: |
          set -x
          ls -lh $HOME/.local/share/containers

  #ci-push-container-image-to-repository:
  #  name: Push Container Image to Repository
  #  needs: ci-create-container-image
  #  runs-on: ubuntu-latest
  #  steps:
      - name: CI - Push Container Image
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: quay.io/dwinchell_redhat
          #image: ${{ needs.ci-create-container-image.outputs.image }}
          #tags: ${{ needs.ci-create-container-image.outputs.tags }}
          image: ${{ steps.buildah-build.outputs.image }}
          tags: ${{ steps.buildah-build.outputs.tags }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          #extra-args: --root ./buildah-root --runroot ./buildah-runroot

#  deploy-or-update-environment-dev:
#    name: Deploy or Update Environment - DEV
#    #needs: ci-push-container-image-to-repository
#    needs: create-and-push-image
#    runs-on: ubuntu-latest
#    steps:
#      - name: Clone Ops Repo
#        uses: actions/checkout@v3
#        with:
#          repository: dwinchell/spring-petclinic-ops #TODO
#          token: ${{ secrets.OPS_REPO_TOKEN }}
#          ref: main
#
#      - name: Checkout Ops Repo Branch
#        run: |
#          git checkout -B feature/vanilla
#          git pull # TODO: don't always need to do that
#
#      - name: Update Image Tag
#        uses: mikefarah/yq@master
#        with:
#          cmd: yq -i '.image.tag = "quay.io/dwinchel_redhat/spring-petclinic:${{ steps.buildah-build.outputs.tags }}"' 'charts/spring-petclinic-deploy/values-DEV.yaml' #TODO
#
#      - name: Commit and Push to Ops Repo
#        run: |
#          git config --global user.email "cicd@example.com"
#          git config --global user.name "CI/CD Pipeline"
#          git commit -am "CI/CD Pipeline - updated image tag"
#          git push -u origin feature/vanilla #TODO
#
#      - name: Cache Tools
#        uses: actions/cache@v3
#        with:
#          path: ./bin
#          key: tools
#
#      - name: Download ArgoCD CLI
#        run: |
#          if [ ! -d ./bin ]; then mkdir bin; fi
#          if [ ! -f ./bin/argocd ]; then
#            curl -L https://github.com/argoproj/argo-cd/releases/download/v2.4.3/argocd-linux-amd64 -o ./bin/argocd
#            chmod +x bin/argocd 
#          fi
#          ./bin/argocd --insecure version --client #TODO: tls ca
#
#      - name: ArgoCD - Login
#        run: ./bin/argocd --insecure login ${{ secrets.ARGOCD_HOST }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}
#
#        #print("Determine deployment namespace")
#
#      #TODO: hard coded
#      - name: ArgoCD - Create or Update Application
#        run: |
#          # TODO: make it work for a private repository
#          ./bin/argocd --insecure app create \
#            spring-petclinic \
#            --repo=https://github.com/dwinchell/spring-petclinic-ops.git \
#            --revision=feature/vanilla \
#            --path=charts/spring-petclinic-deploy/ \
#            --dest-server=https://kubernetes.default.svc \
#            --dest-namespace=feature-vanilla \
#            --sync-policy=automated \
#            --project=default \
#            --values=values-DEV.yaml \
#            --upsert
#
#      - name: ArgoCD - Sync
#        run: |
#          ./bin/argocd --insecure app wait \
#              spring-petclinic \
#              --operation \
#              --timeout 60
#          ./bin/argocd --insecure app sync \
#            --async \
#            --timeout 60 \
#            --retry-limit 30 \
#            spring-petclinic
#
#        #TODO: Add outputs
#        #    name='argocd-deployed-manifest',
#        #    name='deployed-host-urls',
#
