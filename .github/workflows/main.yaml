---
# This Github workflow will run jobs to build java-app.
name: spring-petclinic
on:
  push:
  workflow_dispatch:
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
permissions:
  pull-requests: write

jobs:


  ci-package-application:
    name: Package Application
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven

      - name: Maven Package
        run: mvn --batch-mode --update-snapshots package

      - uses: actions/upload-artifact@v1
        with:
          name: maven-output
          path: target/
          

  #TODO: split into two jobs. Try caching dir specified by buildah bud --root
  create-and-push-image:
  #ci-create-container-image:
  #  name: Create Container Image
    needs: ci-package-application
    name: Create and Push Container Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.buildah-build.outputs.image }}
      tags: ${{ steps.buildah-build.outputs.tags }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v1
        with:
          name: maven-output
          path: target/

      - name: CI - Create Container Image
        id: buildah-build
        uses: redhat-actions/buildah-build@v2
        with:
          image: spring-petclinic # TODO: hard coded
          tags: ${{ github.sha }}
          containerfiles: |
            ./Containerfile


  #ci-push-container-image-to-repository:
  #  name: Push Container Image to Repository
  #  needs: ci-create-container-image
  #  runs-on: ubuntu-latest
  #  steps:
      - name: CI - Push Container Image
        uses: redhat-actions/push-to-registry@v2
        with:
          registry: quay.io/dwinchell_redhat
          #image: ${{ needs.ci-create-container-image.outputs.image }}
          #tags: ${{ needs.ci-create-container-image.outputs.tags }}
          image: ${{ steps.buildah-build.outputs.image }}
          tags: ${{ steps.buildah-build.outputs.tags }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

  deploy-or-update-environment-dev:
    name: Deploy or Update Environment - DEV
    #needs: ci-push-container-image-to-repository
    needs: create-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Clone Ops Repo
        uses: actions/checkout@v3
        with:
          repository: dwinchell/spring-petclinic-ops #TODO
          token: ${{ secrets.OPS_REPO_TOKEN }}
          ref: main


      - name: Update Image Tag
        uses: mikefarah/yq@master
        with:
          cmd: yq -i '.image.tag = "quay.io/dwinchel_redhat/spring-petclinic:latest"' 'charts/spring-petclinic-deploy/values-DEV.yaml' #TODO

      - name: Push to Feature Branch
        run: |
          git checkout -b feature/vanilla # TODO
          git push -u origin feature/vanilla #TODO

      - name: Cache Tools
        uses: actions/cache@v3
        with:
          path: ./bin
          key: tools

      - name: Download ArgoCD CLI
        run: |
          if [ ! -d ./bin ]; then mkdir bin; fi
          if [ ! -f ./bin/argocd ]; then
            curl -L https://github.com/argoproj/argo-cd/releases/download/v2.4.3/argocd-linux-amd64 -o ./bin/argocd
            chmod +x bin/argocd 
          fi
          ./bin/argocd --insecure version --client #TODO: tls ca

      - name: ArgoCD - Login
        run: ./bin/argocd --insecure login ${{ secrets.ARGOCD_HOST }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }}

        #print("Determine deployment namespace")

      #TODO: hard coded
      - name: ArgoCD - Create or Update Application
        run: |
          # TODO: make it work for a private repository
          ./bin/argocd --insecure app create \
            spring-petclinic \
            --repo=https://github.com/dwinchell/spring-petclinic-ops.git \
            --revision=feature/vanilla \
            --path=charts/spring-petclinic-deploy/ \
            --dest-server=https://kubernetes.default.svc \
            --dest-namespace=feature/vanilla \
            --sync-policy=automated \
            --project=default \
            --upsert

      - name: ArgoCD - Sync
        run: |
          ./bin/argocd --insecure app wait \
              vanilla \
              --operation \
              --timeout 60
          ./bin/argocd --insecure app sync \
            --async \
            --timeout 60 \
            --retry-limit 30 \
            vanilla

        #TODO: Add outputs
        #    name='argocd-deployed-manifest',
        #    name='deployed-host-urls',

